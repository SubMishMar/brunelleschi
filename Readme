Note: Assuming the necessary packages from openrobots, ORB_SLAM2, etc are already installed in both the euclid and the desktop. After installing ORB_SLAM2, one has to modified the ros wrapper script a bit to publish the pose as a geometry_msgs::Pose or nav_msgs::Odometry. When running ORB_SLAM2 on Euclid, make sure that the visualizer is off, for the device named "brunelleschi" I have taken care of that. 

We want to do comparison of the data generated by two SLAM algorithms, viz. the RealSense SLAM and ORB_SLAM2.
We have 3 sources of data
1. Motion Capture
2. RealSense SLAM: Always runs on the Euclid device
3. ORB_SLAM2: a. Runs on PC
              b. Runs on Euclid device

We run tests by 1. Running ORB_SLAM2 on PC, 2. Running ORB_SLAM2 on Euclid Device
Case 1: Running ORB_SLAM2 on PC
1. open the euclid's web interface and then run the 6-DOF scenario.
2. open a terminal on the pc and export the ROS_MASTER_URI to the euclid device.
3. on the same terminal roslaunch the orb_slam2 launch file.
4. open another terminal, export the ROS_MASTER_URI to the euclid device and type "rosix -p 8081" and press enter., this helps to obtain data in simulink
5. open another terminal and ssh into the euclid device and launch rosix by typing "rosix -p 8081" and press enter.

Now one can visualize the data either by using rviz or using the rosix/genomix blocks in simulink. 
*For rviz, open a new terminal in the PC and export the ROS_MASTER_URI to the euclid device. Then run rviz. Add the topics u want to view accordingly.
*For simulink, the procedure is simple if one is already running rosix on the required machines. Next, create a model in simulink by adding a genomix port and configure it as follows to get data from the euclid device,
**Host:host_ip:port_number, for eg, the euclid device's ip in our case is 140.93.16.81 and the port number is 8081 since we typed "rosix -p 8081". So, for getting data from rosnodes running on the eculid device, Host:140.93.16.81:8081 .
**Component: It is the name of the node which gives the topic of your choice. For euclid device based RealSenseSLAM, the node named "manager" emits the odometry data, so, 
Component: manager
**After this, click on "Fetch signal descriptions", This will show the available topics in the "Port" drop down menu. Choose the appropriate topic and then add the required fields of that topic using the add button in the same dialog box.
**For getting rostopics published by rosnodes running on the host machine in simulink,  one just has to set the Host to localhost:port, in this case the port is 8081, so Host:localhost:8081. Next steps are the same.

Case 2: Running ORB_SLAM2 on Euclid
1. open the euclid's web interface and then run the 6-DOF scenario.
2. open a terminal and ssh into the euclid device and launch rosix by typing "rosix -p 8081" and press enter.
3. open another terminal, ssh into the euclid device and roslaunch the orb_slam2 launch file.

Now one can visualize the data either by using rviz or using the rosix/genomix blocks in simulink. 
*For rviz, open a new terminal in the PC and export the ROS_MASTER_URI to the euclid device. Then run rviz. Add the topics u want to view accordingly.
*For simulink, the procedure is simple if one is already running rosix on the required machines. Next, create a model in simulink by adding a genomix port and configure it as follows to get data from the euclid device,
**Host:host_ip:port_number, for eg, the euclid device's ip in our case is 140.93.16.81 and the port number is 8081 since we typed "rosix -p 8081". So, for getting data from rosnodes running on the eculid device, Host:140.93.16.81:8081 .
**Component: It is the name of the node which gives the topic of your choice. For euclid device based RealSenseSLAM, the node named "manager" emits the odometry data, so, 
Component: manager
**After this, click on "Fetch signal descriptions", This will show the available topics in the "Port" drop down menu. Choose the appropriate topic and then add the required fields of that topic using the add button in the same dialog box.
**For getting the odometry/pose data published by ORB_SLAM2 node, we dont need to change the host (because orb_slam2 is running on the euclid device) but need to change the name of the component to ORB_SLAM2 and next the procedure is same as given in case 1.
